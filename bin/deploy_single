#!/usr/bin/env bash
if [[ $# -gt 4 || "$*" = "help" || "$*" = "-h" || "$*" = "--help" || "$IOTEMPOWER_DEPLOY" != active ]]; then
cat << EOF
Syntax: deploy_single

deploy_single should only be called from deploy

Read the help of deploy if you want to use it.
EOF
exit 1
fi

[ "$IOTEMPOWER_ACTIVE" = "yes" ] || { echo "IoTempower not active, aborting." 1>&2;exit 1; }

MAX_UPLOAD_TRIES=3

# TODO, decide if esp32 or esp8266 to use - based on selected board
ESPOTAPY="$HOME/.platformio/packages/framework-arduinoespressif8266/tools/espota.py"
# ESPOTAPY="$HOME/.platformio/packages/framework-arduinoespressif32/tools/espota.py"

if [[ -e "node.conf" ]]; then  # started from node-directory
    source "$IOTEMPOWER_ROOT/bin/read_node_config"
    export board # for platformio.ini

    port=""
    remote=""
    key=""
    pio_upload="-t upload"
    adopt=""

    platform_folder="$IOTEMPOWER_ROOT/lib/node_types/$board"

    # check key-file and eventually regenerate
    KEYFILE=key.txt
    key=$(tail -n1 "$KEYFILE" 2>/dev/null)
    if [[ ! ${#key} = 64 ]]; then
        # TODO: check that haveged is running and maybe check not to overwrite key?
        echo "Generating new key."
        # random password must not have chars like $, ", # as bash and platformio
        # messes that up later (especially $)
        < /dev/random tr -dc A-Za-z0-9\-\+_\=/@% | head -c64 > "$KEYFILE"
        #head -c32 /dev/random|od -A n -t x2|tr -d ' \r\n' > "$KEYFILE"
        key=$(tail -n1 "$KEYFILE" 2>/dev/null)
    fi

    port_find_option=""
    if [[ "$*" == *force ]]; then
        port_find_option="nodongle"
    fi

    if [[ "$1" == "compile" ]]; then
        echo "Just compiling (no remote upload or serial flash)."
        pio_upload=""
    elif [[ "$1" == "serial" ]]; then # local flash requested
        echo "Trying to select serial port."
        port=$(find_esp_port "$2" $port_find_option)
        echo "Using $port."
    else
        if [[ "$1" == adopt ]]; then # if we adopt, we have fixed values
            if [[ "$2" == serial ]]; then # adopt locally connected
                echo "Trying to select serial port."
                port=$(find_esp_port "$3" $port_find_option)
                echo "Using $port."
            else
                # no network name should be given
                # we should only compile and then adopt
                pio_upload=""
                adopt="dongle adopt -r -f .pio/build/$board/firmware.bin -n "\""$2"\"
            fi
        elif [[ "$1" ]]; then # address or network name given
            remote="$1"
            if [[ "$2" ]]; then
                key="$2"
            else
                key=$(tail -n1 key.txt 2>/dev/null|head -c 64)
            fi
        else # nothing given, deploy was just called without parameters
            #remote="$node_name.local"
            # getting IP from mqtt
            echo "Getting IP of node $node_name for deployment."
            remote=$(get_ip "$node_name" 2>/dev/null)
            if [[ ! "$remote" ]]; then
                echo "Node doesn't seem to be online. Deploy of $node_name failed."
                exit 1
            fi
        fi
        # TODO: when doing ota-upload, allow doing the actual upload several times, but only
        # needing to compile once
        if [[ "$remote" ]]; then
            echo "Deploying remotely to node $topic with address $remote."
            pio_upload=""
#            export PLATFORMIO_UPLOAD_PORT="$remote"
#            export PLATFORMIO_UPLOAD_FLAGS="--progress
# --port=8266
# --auth="\""$key"\"
        fi
    fi

    if [[ $port ]]; then
        # Check if the port starts with /dev/ or is a URL (handling ws, http, https, rfc2217, etc.)
        if [[ "$port" =~ ^/dev/ || "$port" =~ ^[0-9a-zA-Z]+:// ]]; then
            export PLATFORMIO_UPLOAD_PORT="$port"
        else
            export PLATFORMIO_UPLOAD_PORT="/dev/$port"
        fi

        if [[ ! "$*" == *force ]]; then # usually check dongle
            dongle probe -p "$PLATFORMIO_UPLOAD_PORT" && {
                echo "There is a IoTempower esp dongle connected at $PLATFORMIO_UPLOAD_PORT."
                echo "Refusing to overwrite."
                echo "If you are sure, specify force as last parameter."
                exit 1
            }
        fi
    fi


    prepare_build_dir cache
    #cd "$IOTEMPOWER_COMPILE_CACHE"
    cd build

    export PLATFORMIO_LIBDEPS_DIR="$IOTEMPOWER_COMPILE_CACHE/libs"
    export PLATFORMIO_BUILD_CACHE_DIR="$IOTEMPOWER_COMPILE_CACHE/platformio"

    iot_platformio run $pio_upload || { echo "Trouble compiling or flashing new firmware, check errors."; exit 1; }
    
    if [[ "$remote" || "$adopt" ]]; then
        i=1
        waittime=5
        while true; do
            echo "Trying upload $i/$MAX_UPLOAD_TRIES."
            if [[ "$remote" ]]; then
                waittime=15
                python "$ESPOTAPY" --progress -a "$key" \
                    --port=8266 --ip="$remote" --file=".pio/build/$board/firmware.bin"
            else
                waittime=45
                $adopt
            fi 
            if [[ $? -eq 0 ]]; then
                break
            else
                echo
                echo "Upload try $i/$MAX_UPLOAD_TRIES failed."
                if [[ "$i" -eq "$MAX_UPLOAD_TRIES" ]]; then
                    echo "Upload ultimately failed after $MAX_UPLOAD_TRIES tries."
                    echo "Check errors above."
                    exit 1
                else
                    echo "Trying again in ${waittime}s (press ctrl-c to interrupt)."
                    sleep ${waittime}
                fi
            fi
            i=$(( $i + 1 ))
        done
    fi
    echo "deploy successfully done."

    if [[ "$port" ]]; then
        echo
        echo "OTA updates are now enabled."
    fi

else # started from somewhere else, so search for node.conf in subdirs

    echo "deploy_single can only be run in node directory."
    exit 1

fi # not in node-dir