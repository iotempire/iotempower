#!/usr/bin/env bash

# if not available, install all dependencies
# and also allow to fix shebangs in local bin folder
#
# check if everything from IOTEMPOWER_EXTERNAL is downloaded and accessable
# if not asks to install it
#
# if called as check_install clean, it will delete content of IOTEMPOWER_EXTERNAL and
# re-download everything
#
# Author: ulno
# Create date: 2017-05-17

[ "$IOTEMPOWER_ACTIVE" = "yes" ] || { echo "IoTempower not active, aborting." 1>&2;exit 1; }

iot_grun() { 
  # LD_PRELOAD="$GLIBC_PRELOAD" "$@"
  if [[ -n "$PREFIX" ]] && command -v apt-get &> /dev/null; then
    #LD_PRELOAD="/data/data/com.termux/files/usr/glibc/lib/libtermux-exec.so" \
    # empty works better for python install, maybe also for nodejs, TODO: re-test
    LD_PRELOAD="" \
    PATH="/data/data/com.termux/files/usr/glibc/bin:$PATH" "$@"
  else
    "$@"
  fi
}

function printf_format() {
  # Check if tput is available.
  if command -v tput &>/dev/null; then
    width="$(tput cols)"
  else
    width="${COLUMNS:-40}"
  fi
  
  format_command="fold -s -w $width"

  if [ $# -gt 0 ]; then
    printf "$@" | $format_command
  else
    $format_command
  fi
}

function echo_format() {
  echo "$@" | printf_format
}

function welcome() {
cat << EOF | printf_format
IoTempower installer
====================

Welcome to the IoTempower environment installer. \
You are just a couple of steps from setting up a very simple and accessible system \
to deploy your own Internet of Things (IoT).

Make sure that this is the script from \
https://github.com/iotempire/iotempower/blob/master/bin/curl_install \
and that it clones the software from https://github.com/iotempire/iotempower

Depending on your system configuration, we will use \
sudo several times to install missing packages and give you access to serial ports. \
Make sure you check above script and files in \
https://github.com/iotempire/iotempower/tree/master/lib/iot_installs \
to see how we make use of sudo. If you cannot trust this source, please follow \
the manual installation here: \
https://github.com/iotempire/iotempower/blob/master/doc/installation.rst

And now have fun installing IoTempower and welcome to the IoTempire!

EOF
}

# Function to echo a message and read the user's answer.
#
# Parameters:
#     question (str): The question to be echoed.
#     default (str, optional): The default value if no input is provided. Defaults to 'y'.
#
# Returns:
#     int: Returns 1 if the user input is 'y' or 'Y', 0 if the user input is 'n' or 'N', and asks again if the input is invalid.
function echo_message_read_answer() {
    # TODO: this is not comment practice in scripting: 0 is the sign for ok, everything else is an error, needs to be refactored
    local question="$1"
    local default="${2:-y}" # Set 'y' as the default value if not provided
    local reply

    # Check default value to adjust the prompt accordingly
    case "$default" in
        y|Y)
            printf_format "%s (Y/n)? " "$question"
            ;;
        n|N)
            printf_format "%s (y/N)? " "$question"
            ;;
        *)
            echo_format "Invalid default value. Please use 'y' or 'n'."
            return 2
            ;;
    esac

    # Read the user input
    read -r reply
    reply="${reply:-$default}"

    # Return based on the user input or default
    case "$reply" in
        y|Y)
            return 1
            ;;
        n|N)
            return 0
            ;;
        *)
            echo_format "Invalid input. Please use 'y' or 'n'."
            ask_question "$question" "$default" # Ask again if invalid input
            ;;
    esac
}

function activate() {
  source "$IOTEMPOWER_VPYTHON/bin/activate"
}

function init_nodejs() {
    cd "$IOTEMPOWER_LOCAL" || { echo "$IOTEMPOWER_LOCAL not found, aborting." 1>&2;exit 1; }
    mkdir -p nodejs && cd nodejs || { echo "Can't create nodejs folder, aborting." 1>&2;exit 1; }
    # if package.json does not exist, run nmp init to create it
    deactivate # termux can't do the following in venv - do we need to specialize this?
    #iot_grun npm init -y > /dev/null
    # check if pakage.json exists
    if [ ! -f package.json ]; then
      npm init -y > /dev/null
    fi
    if ! command -v node-gyp &> /dev/null; then
      npm install node-gyp
      npm install node-pre-gyp
    # fi
    # if ! npm list node-pty >/dev/null 2>&1; then - takes too long
      npm install node-pty
    fi
    activate
}

function check_pi() {
  # check if this is a raspberry pi - TODO: seems not to work, verify
  #vcgencmd version &> /dev/null
  grep -q -i "raspberry" /proc/device-tree/model 2> /dev/null
}

# make installers available in PATH
export PATH="$IOTEMPOWER_ROOT/lib/iot_installs:$PATH"

# Parsing options
# TODO: add quiet or yes option
help_string="Possible options:
--clean: cleans core installation and starts a new virtual environment removing all locally installed packages
--default: install all dependencies (optional & required) and tweaks but do not populate the cache
--upgrade: run a system upgrade of all installed system packages before starting
--system: install system requirements (python, nodejs)
--core: install IoTempower core (platformio, deployment and compilation environment)
--cloudcmd: install Cloud Commander web file manager into local environment
--node-red: install Node-RED IoT integration platform into local environment
--caddy: install Caddy web server into system
--mqtt: install Mosquitto mqtt broker into system
--convenience: install mc, tmux, micro, tilde, elinks (if possible) into system
--templates: create iot-systems template
--platforms: pre-download esp8266 and esp32 platforms
--cache: pre-fill cache to accelerate compilations
--fix-serial: Fix/add serial port permissions for current user
--fix-pi-wifi-ap: Fix Raspberry Pi wireless firmware for access point usage
"
if [[ "$@" == *help* ]]; then # overwrite if help was given
  set -- "-h"
fi
while getopts ":h-:" opt; do
  case $opt in
    h)
      echo_format "$help_string"
      exit 0;;
    -)
      case "${OPTARG}" in
        help)
          echo_format "$help_string"
          exit 0;;
        clean)
          clean=1;;
        default)
          default=1;;
        upgrade)
          do_upgrade=1;;
        system)
          install_system=1;;
        core)
          install_core=1;;
        cloudcmd)
          install_cloudcmd=1;;
        node-red)
          install_node_red=1;;
        caddy)
          install_caddy=1;;
        mqtt)
          install_mqtt=1;;
        convenience)
          install_convenience=1;;
        templates)
          install_template=1;;
        platforms)
          install_platforms=1;;
        cache)
          fill_cache=1;;
        fix-serial)
          fix_serial_permissions=1;;
        fix-pi-wifi-ap)
          fix_pi_wifi_ap=1;;
        *)
          echo_format "Invalid option: --${OPTARG}"
          exit 1;;
      esac
      ;;
    \?)
      echo_format "Invalid option: -$OPTARG"
      exit 1;;
  esac
done

if [[ "$clean" == 1 ]]; then
  # TODO: skip this if quiet is set (and don't make quiet the same as default)')
  echo_message_read_answer "Are you sure you want to clean all core installation and start a new virtual environment?" "n"
  if [[ "$?" == 0 ]]; then
    exit 1
  fi
  echo_format "Deleting core environment... "
  rm -rf "$IOTEMPOWER_VPYTHON"
  rm -rf "$IOTEMPOWER_EXTERNAL"
  echo_format "... done deleting core environment."
  echo
  if [ "$#" -eq 1 ]; then # only clean was given, so set to default install with questions after this deletion
    set --
  fi
  # TODO: consider also offering to clear $HOME/.npm
fi

# check if virtualenv is already set up
if [[ -e "$IOTEMPOWER_VPYTHON/bin/activate" ]]; then # check for existing venv
    activate
else # no virtualenv exists, so create new one
  install_core=1
fi

if [[ "$default" == 1 ]]; then
  install_system=1
  install_cloudcmd=1
  install_node_red=1
  install_caddy=1
  install_mqtt=1
  if check_pi; then
    fix_pi_wifi_ap=1
  else
    fix_pi_wifi_ap=0
  fi
  install_convenience=1
  install_template=1
  install_platforms=1
  fill_cache=0
  do_upgrade=1
else # not default
  if [ "$#" -eq 0 ]; then # no arguments given, so ask what the user wants
    welcome
    # this is essential for the default installation
    # echo_message_read_answer "Do you want to set up IoTempower core (compilation and deployment environment)"
    # install_core=$?
    echo_format "We are going to set up IoTempower core (compilation and deployment environment)."
    echo 

    echo_message_read_answer "Do you want to upgrade all system packages before the installation starts"
    do_upgrade=$?

    echo_message_read_answer "Do you want to install all system dependencies?"
    install_system=$?

    optional_message="Do you want to install the optional dependency"
    # as we have already checked that there have ben no other arguments given, this is not necessary
    # if [ -z "$install_cloudcmd" ] && [ -z "$install_node_red" ] &&
    #     [ -z "$install_caddy" ] && [ -z "$install_mqtt" ] && [ -z "$fix_pi_wifi_ap" ]; then
      echo_message_read_answer "${optional_message} CLOUD COMMANDER (Details -> https://cloudcmd.io/)"
      install_cloudcmd=$?

      echo_message_read_answer "${optional_message} NODE-RED (Details -> https://nodered.org/)"
      install_node_red=$?

      echo_message_read_answer "${optional_message} CADDY (Details -> https://caddyserver.com/)"
      install_caddy=$?

      echo_message_read_answer "${optional_message} MOSQUITTO MQTT broker (Details -> https://mosquitto.org/)"
      install_mqtt=$?

      echo_message_read_answer "${optional_message} convenience tools (tmux, mc, micro, tilde, elinks)"
      install_convenience=$?

      echo_message_read_answer "Do you want to setup the iot-systems template folder"
      install_template=$?

      echo_message_read_answer "Do you want to pre-download the esp8266 and esp32 platforms"
      install_platforms=$?

      echo_message_read_answer "$(printf "%b" \
        "Do you want to pre-populate the compile cache to " \
        "accelerate future compilations (can take a long time)." \
        )" n
      fill_cache=$?

      # TODO:Don't show for termux
      if [[ -n "$PREFIX" ]] && command -v apt-get &> /dev/null; then
        echo_format "No serial permission change for termux."
      else
        echo_message_read_answer "Do you want to add permissions for accessing the serial port for your user?"
        fix_serial_permissions=$?
      fi

      if check_pi; then
        # activate minimal firmware
        echo_message_read_answer "$(printf "%b\n" \
          "In order to support a larger amount of connected devices,"\
          "on the raspberry pi a special minimal version"\
          "of the wireless chip firmware has to be enabled."\
          "NB! A maximum of 8 connected clients are supported"\
          "without the use of minimal broadcom firmware."\
          "Do you want to install the fixed firmware?")"
        fix_pi_wifi_ap=$?
      fi # check pi
 
    # fi # have arguments been given
  fi # no arguments given, user asked
fi # not default

# make sure package lists are uptodate when system packages are installed
if [ "$install_caddy" == "1" ] \
  || [ "$install_mqtt" == "1" ] \
  || [ "$install_convenience" == "1" ]; then
  echo_format "Updating package lists..."
  call_by_system update
  echo_format "Updating package lists done."
  echo
fi

if [[ "$do_upgrade" == 1 ]]; then
  call_by_system upgrade
  echo
fi

if [[ "$install_system" == 1 ]]; then
  call_by_system install-general
  echo
fi

if [[ "$install_core" == 1 ]]; then
  # install virtualenv
  iot_grun python3 -m venv --system-site-packages "$IOTEMPOWER_VPYTHON"
  activate
  iot_grun pip install --no-cache-dir --upgrade pip
  # git+https://github.com/iotempire/iotknit breaks in requirements when using termux glibc git
  iot_grun pip install --no-cache-dir -r "$IOTEMPOWER_ROOT/lib/iot_installs/requirements.txt"

  deactivate
  git clone https://github.com/iotempire/iotknit "$TMPDIR/iotknit"
  pushd "$TMPDIR/iotknit"
  iot_grun python setup.py install
  popd

  # access point - TODO: make this optional
  git clone https://github.com/ulno/create_ap "$IOTEMPOWER_EXTERNAL/create_ap"
  #cd "$IOTEMPOWER_EXTERNAL/create_ap"
  activate

  # install node.js related stuff
  init_nodejs

#  iot_grun npm install terminal-kit
  deactivate
  npm install terminal-kit
  activate
  echo_format "All core packages have been installed."
fi # core

if [[ "$install_cloudcmd" == 1 ]]; then
  init_nodejs
  echo_format "Installing Cloud Commander"
  deactivate
  # iot_grun npm install gritty
  # iot_grun npm install cloudcmd
  npm install gritty
  npm install cloudcmd

  cloudcmd --terminal --terminal-path "$(gritty --path)" --save --no-server
  activate
  # copy menu files
  cp -a "$IOTEMPOWER_ROOT/lib/gateway_setup/cloudcmd/cloudcmd.menu.js" "$HOME/.cloudcmd.menu.js"
  cp -a "$IOTEMPOWER_ROOT/lib/gateway_setup/cloudcmd/cloudcmd.json" "$HOME/.cloudcmd.json"

  cloudcmd_config=~/.cloudcmd.json
  jq "$(printf "%s" \
      '.auth = true | '\
      '.prefix = "/cloudcmd" | '\
      '.username = "iot" | '\
      '.password = "709d553e1a6e0b3f874408865d169870a945ceb25d72be561b7a50a23713d3452aea896e8e24783adcce86fddba087939ae3da9574997334e6362b5e767aa68a" | '\
      '.algo = "sha512WithRSAEncryption"'\
    )" \
    "$cloudcmd_config" > "$cloudcmd_config.new" \
  || { echo_format "jq failed, aborting." 1>&2;exit 1; }
  mv "$cloudcmd_config" "$cloudcmd_config.backup" &>/dev/null
  mv "$cloudcmd_config.new" "$cloudcmd_config"

fi # cloudcmd

if [[ "$install_node_red" == 1 ]]; then
  init_nodejs
  deactivate # termux can't do the following in venv - do we need to specialize this?
  echo_format "Installing Node Red"
  npm install --unsafe-perm node-red
  mkdir -p "$HOME/.node-red"
  cp "$IOTEMPOWER_LOCAL"/nodejs/node_modules/node-red/settings.js "$HOME/.node-red/"
  nodered_config=~/.node-red/settings.js

  if ! grep -q "module.exports.httpAdminRoot = '/nodered';" "$nodered_config" ; then
    cat << EOF >> "$nodered_config"
module.exports.httpAdminRoot = '/nodered';
module.exports.httpNodeRoot = '/nodered';
module.exports.adminAuth= {
type: "credentials",
users: [{
    username: "admin",
    password: "\$2b\$08\$W5LDP3eTaIYjz5iJkKVwMu9JDg3cPFMUvBypMCmYA3fpjYQlzFC4e",
    permissions: "*"
}]
};
EOF
    pushd "$HOME/.node-red"
    npm i node-red/node-red-dashboard  # install dashboard
    npm i node-red-contrib-influxdb # install influxdb connector
    popd
    echo_format "Changed $nodered_config."
  fi # node-red config
  activate
fi # node-red

if [[ "$install_caddy" == 1 ]]; then
  echo_format "Installing Caddy"
  call_by_system install-caddy
fi # caddy

if [[ "$install_mqtt" == 1 ]]; then
  echo_format "Installing Mosquitto"
  call_by_system install-mosquitto
fi # mosquitto

if [[ "$install_convenience" == 1 ]]; then
  echo_format "Installing convenience tools"
  call_by_system install-other tmux mc micro tilde elinks
  # consider installing convenience settings for mc (add user-menu to it)
fi # convenience

if [[ "$install_template" == 1 ]]; then
  echo_format "Creating iot-systems folder from template"
  if [ ! -d "iot-systems" ]; then
    rsync -a "$IOTEMPOWER_ROOT/examples/iot-systems-template/" "$HOME/iot-systems/"
  else
    echo_format "iot-systems already exists, skipping the copy."
  fi # iot-systems exist?
fi # templates

if [[ "$fix_pi_wifi_ap" == 1 ]]; then
  echo_format "Fix pi wifi ap firmware for more clients."
  unbreak_ap_limit # TODO: integrate correctly, and check if we are on the pi
fi # fix wifi raspi

# fix shebangs for environments like termux
bash "$IOTEMPOWER_ROOT/bin/fix_bin"

# activate iot script # TODO: should we expose that as optional?
iot_activate_iot_script

if [[ "$install_platforms" == 1 ]]; then
  echo_format "Installing platforms."
  iot_platformio platform install espressif8266@4.0.1
  iot_platformio platform install espressif32@6.4.0
  fix_bin_termux
fi

if [[ "$fill_cache" == 1 ]]; then
  # populate the cache TODO: potentially integrate with testing
  update_cache
fi # cache

# compile man-pages and html-pages of documentation
iot_doc make

# add permissions to access serial port for current user
if [[ "$fix_serial_permissions" == 1 ]]; then
  iot_add_serial_permissions
fi

# Save the state
iot_grun python3 "$IOTEMPOWER_ROOT"/utils/save_arguments_as_json.py --splitter '=' --path "$IOTEMPOWER_LOCAL"/installation_options.json \
  core="$install_core" cloud_commander="$install_cloudcmd" \
  node_red="$install_node_red" caddy="$install_caddy" \
  mosquitto="$install_mqtt" \
  fix_serial_permissions="$fix_serial_permissions" \
  fix_pi_wifi_ap="$fix_pi_wifi_ap" \
  convenience="$install_convenience" \
  templates="$install_template" \
  cache="$fill_cache"

# TODO: uninstaller?
# TODO: make test install specific

# Testing the installation
if ! iot_grun pytest "$IOTEMPOWER_ROOT"/tests/test_installations.py; then
  exit 1
fi

exit 0