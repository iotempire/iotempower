#!/usr/bin/env bash
# run different IoTempower esp dongle programs
#
# TODO: help
#

[ "$IOTEMPOWER_ACTIVE" = "yes" ] || { echo "IoTempower not active, aborting." 1>&2;exit 1; }


iot_grun() { 
  # LD_PRELOAD="$GLIBC_PRELOAD" "$@"
  if [[ -n "$PREFIX" ]] && command -v apt-get &> /dev/null; then
    #LD_PRELOAD="/data/data/com.termux/files/usr/glibc/lib/libtermux-exec.so" \
    # empty works better for python install, maybe also for nodejs, TODO: re-test
    LD_PRELOAD="" \
    PATH="${PATH%%:*}:/data/data/com.termux/files/usr/glibc/bin:${PATH#*:}" "$@"
  else
    "$@"
  fi
}

daemon_fifo=/var/tmp/iotempower_dongle
daemon_port="$daemon_fifo.port"

# Check if a command is provided
if [[ $# -lt 1 || "$*" = "help" || "$*" = "-h" || "$*" = "--help" ]]; then
    echo "Error: No command provided."
    echo "Usage: dongle <command> [options]"
    echo "Available commands:"
    
    # List all commands that match the pattern
    for cmd in "$IOTEMPOWER_ROOT/bin/dongle_"*".py"; do
        # Extract the command name without path and .py extension
        cmd_name=$(basename "${cmd%.*}")
        echo "  - ${cmd_name#dongle_}"
    done
    
    exit 1
fi

command="$1"


shift 1




function dongle_release() {
    if [[ -e "$daemon_fifo" ]]; then
        echo release > "$daemon_fifo" & # release serial
        sleep 0.5
    fi
}

function dongle_connect() {
    if [[ -e "$daemon_fifo" ]]; then
        echo connect > "$daemon_fifo" & # connect and resume daemon again
        sleep 0.5
    fi
}

if [[ "$command" = flash ]]; then
    dongle_release
    port=""
    port=$(cat "$daemon_port" 2>/dev/null)
    if [[ ! "$port" ]]; then
        port=/dev/$(find_esp_port "$1" nodongle)
    fi
    echo "Flashing dongle on port $port..."
    iot_grun python3 "$IOTEMPOWER_ROOT/bin/dongle_display.py" -p "$port" \
        "Updating\\\\nfirmware...\\\\n\\\\nPlease wait."
    cd "$IOTEMPOWER_ROOT/lib/esp_dongle"
    export PLATFORMIO_UPLOAD_PORT="$port"
    iot_platformio run -t upload
    result=$?
#    if [[ "$result" -eq 0 ]]; then
#        echo "Flashing dongle on $port."
#        esptool.py --port "$port" write_flash 0 .pio/build/d1_mini/firmware.bin
#        result=$?
        if [[ "$result" -eq 0 ]]; then
            echo "Waiting 5s for reboot before reconnect..."
            sleep 5 # allow reboot
            echo "Successfully flashed dongle."
#        else
#            echo "Error compiling or flashing. Check errors."
#        fi
    else
        echo "Error compiling or flashing. Check errors."
    fi
    dongle_connect
    exit $result
elif [[ "$command" = daemon ]]; then
    if [[ -e "$daemon_fifo" ]]; then
        echo quit >"$daemon_fifo" & # stop old daemon
        sleep 0.5 # let it stop
        rm -f "$daemon_fifo" "$daemon_port"
    fi
    # probe where dongle is running
    echo "Searching dongle..."
    if [[ "$1" ]]; then  # port was given
        port="/dev/$1"
    else
        port=""
        ports=$(iot_platformio device list --serial|grep -E '^/dev/tty'|sort) # get available serial ports
        for p in $ports; do
            if dongle probe -p "$p"; then
                port="$p"
                break;
            fi
        done
    fi
    if [[ "$port" ]]; then
        echo "$port" > "$daemon_port"
        echo "Starting daemon on $port."
        mkfifo -m 600 "$daemon_fifo"
    #    iot_grun python3 "$IOTEMPOWER_ROOT/bin/dongle_daemon.py" "$@" <"$daemon_fifo"
        # not sure why I have to use tail for the fifo and not <$daemon_fifo
        iot_grun python3 "$IOTEMPOWER_ROOT/bin/dongle_daemon.py" -i "$daemon_fifo" -p "$port" "$@"
        rm -f "$daemon_fifo" "$daemon_port"
    else
        echo "Dongle not found."
        exit 1
    fi
elif [[ "$command" = quit ]]; then
    if [[ -e "$daemon_fifo" ]]; then
        echo "Sending quit to daemon."
        echo quit >"$daemon_fifo" & # stop old daemon
        sleep 0.5 # let it stop
        rm -f "$daemon_fifo" "$daemon_port" # should be already deleted
    fi
else
    dongle_release
    port=""
    port=$(cat "$daemon_port" 2>/dev/null)
    if [[ "$port" ]]; then
        iot_grun python3 "$IOTEMPOWER_ROOT/bin/dongle_$command.py" -p "$port" "$@"
    else
        iot_grun python3 "$IOTEMPOWER_ROOT/bin/dongle_$command.py" "$@"
    fi
    result=$?
    dongle_connect
    exit $result
fi
